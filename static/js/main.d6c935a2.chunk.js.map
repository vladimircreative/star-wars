{"version":3,"sources":["reducers/rootReducer.js","actions/action-types.js","components/Scroll.js","components/ColorBlock.js","containers/Card.js","actions/index.js","containers/CardArray.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["rootReducer","state","arguments","length","undefined","action","type","Object","objectSpread","word","loading","cards","payload","results","Scroll","props","react_default","a","createElement","className","children","ColorBlock","_ref","color","style","background","Card","card","_card$data","data","name","height","mass","gender","hair_color","skin_color","eye_color","src_components_ColorBlock","fetchBegin","fetchSuccess","console","log","fetchPeople","dispatch","fetch","then","r","json","CardArrayHandler","this","map","i","src_containers_Card","key","Component","CardArray","connect","SearchBoxHandler","_this","onSubmit","e","preventDefault","target","value","placeholder","SearchBox","AppHandler","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","components_SearchBox","src_components_Scroll","containers_CardArray","App","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6c935a2.chunk.js","sourcesContent":["import * as types from \"../actions/action-types\";\r\n\r\n// import React from \"react\";\r\n\r\nconst rootReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case types.FETCH_DATA_BEGIN:\r\n            return {...state, word: action.word, loading: true}\r\n        case types.FETCH_DATA_SUCCESS:\r\n            return {...state, loading: false, cards: action.payload.results}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer;","export const REFRESH = 'REFRESH';\r\nexport const FETCH_DATA_BEGIN = \"FETCH_DATA_BEGIN\";\r\nexport const FETCH_DATA_SUCCESS = \"FETCH_DATA_SUCCESS\";","import React from \"react\"\r\nimport \"./Scroll.css\"\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div className=\"scrollContainer\">\r\n            {props.children}\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default Scroll;","import React from \"react\";\r\nimport \"./ColorBlock.css\";\r\n\r\nconst ColorBlock = ({color}) => {\r\n    return (\r\n        <div className=\"block\" style = {{background: color}}> {color} \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ColorBlock;","import React from \"react\";\r\nimport ColorBlock from \"../components/ColorBlock\"\r\nimport \"./Card.css\"\r\n\r\nconst Card = ( card ) => {\r\n    const { name, height, mass, gender, hair_color, skin_color, eye_color} = card.data;\r\n    return (\r\n        <div className=\"card\">\r\n            <div className = \"line\">Name: <p>{name}</p></div>\r\n            <div className = \"line\">Height: <p>{height} cm</p></div>\r\n            <div className = \"line\">Mass: <p>{mass} kg</p></div>\r\n            <div className = \"line\">Gender: <p>{gender}</p></div>\r\n            <div className = \"line\">Hair color: <ColorBlock color = {hair_color} /></div>\r\n            <div className = \"line\">Skin color: <ColorBlock color = {skin_color} /></div>\r\n            <div className = \"line\">Eye color: <ColorBlock color = {eye_color} /></div>   \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import * as types from './action-types';\r\n\r\nexport const fetchBegin = (word) => {\r\n    return {\r\n        word: word,\r\n        type: types.FETCH_DATA_BEGIN,\r\n    };\r\n}\r\n\r\nexport const fetchSuccess = (payload) => {\r\n    console.log(\"fetch success\");\r\n    return {\r\n        type: types.FETCH_DATA_SUCCESS,\r\n        payload: payload,\r\n    };\r\n}\r\n\r\nexport function fetchPeople(word){\r\n    console.log(\"fetch\", word);\r\n    return dispatch => {\r\n        dispatch(fetchBegin(word));\r\n        return fetch(\"https://swapi.co/api/people/?search=\" + word)\r\n            .then(r => r.json())\r\n            .then(r => {\r\n                dispatch(fetchSuccess(r));\r\n                // return r;\r\n            })\r\n    }\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Component } from \"react\";\r\nimport Card from \"./Card\"\r\nimport \"./CardArray.css\"\r\n\r\nimport { fetchPeople } from \"../actions/index\";\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchPeople: word => dispatch(fetchPeople(word)),\r\n    };\r\n}\r\n\r\n// state to props\r\nconst mapStateToProps = (state) => {\r\n    return({\r\n        word: state.word,\r\n        cards: state.cards,\r\n        loading: state.loading,\r\n    })\r\n}\r\n\r\n// Presentational\r\nclass CardArrayHandler extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchPeople(this.props.word);\r\n    }\r\n\r\n    render() {\r\n        console.log(\"props of card list\", this.props);\r\n        if (this.props.loading) {return <h1>Loading</h1>}\r\n        else return (\r\n            <div className=\"cards\">   \r\n                {this.props.cards.map((card, i) => {return (<Card data={card} key = {i} />);})}\r\n            </div>\r\n        )\r\n    }     \r\n}\r\n\r\n\r\n\r\nexport const CardArray = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,    \r\n)(CardArrayHandler);\r\n\r\nexport default CardArray;\r\n\r\n\r\n                    ","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchPeople } from \"../actions/index\";\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchPeople: word => dispatch(fetchPeople(word)),\r\n    };\r\n}\r\n\r\n// state to props\r\nconst mapStateToProps = (state) => {\r\n    return({\r\n      word: state.word,\r\n    })\r\n  }\r\n\r\nclass SearchBoxHandler extends Component {\r\n    render() {        \r\n        const handleClick = (e) => {\r\n            e.preventDefault();\r\n            this.props.fetchPeople( e.target[0].value );\r\n            e.target[0].value = \"\";\r\n        }\r\n        return (\r\n            <div className=\"searchBox\">\r\n                <form onSubmit={handleClick}>                   \r\n                    <input type=\"text\" placeholder=\"enter\" />                                        \r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n                        \r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nconst SearchBox = connect(mapStateToProps, mapDispatchToProps)(SearchBoxHandler);\r\n\r\nexport default SearchBox","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from \"react-redux\";\nimport Scroll from \"../components/Scroll\";\nimport CardArray from \"../containers/CardArray\";\nimport SearchBox from \"../components/SearchBox\";\n\nclass AppHandler extends Component {\n  constructor(){\n      super();\n      this.state = {\n      }\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          <h1>STAR WARS</h1>                 \n          <SearchBox />        \n          <Scroll>\n                <CardArray />\n          </Scroll>  \n        </div>\n    );\n  }\n}\n\n\n// state to props\nconst mapStateToProps = (state) => {\n  return({\n      word: state.word,\n  })\n}\n\nexport const App = connect(\n  mapStateToProps,\n  // mapDispatchToProps,    \n)(AppHandler);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider} from \"react-redux\";\nimport rootReducer from './reducers/rootReducer';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nlet initialStore = {\n    word: \"Luke\",\n    loading: true,\n}\n\nconst store = createStore(\n    rootReducer, \n    initialStore,\n    applyMiddleware(thunk),);\n\nReactDOM.render(\n    <Provider store = {store}>    \n        <App />      \n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}